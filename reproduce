#!/usr/bin/env ruby

require_relative 'sleepy_worker'
require 'sidekiq/api'

JOB_SLEEP = 30

def log(msg)
  puts "REPRODUCE LOG: #{msg}"
end

log 'Reproducing the bug'

log '1. Starting Sidekiq and waiting 3s'
sidekiq_pid = spawn('sidekiq -c1 -r ./sidekiq.rb')
sleep 3

log "Jobs in the default queue: #{Sidekiq::Queue.new.size}"
log "Job in progress: #{Sidekiq::Workers.new.size}"

log '2. Enqueueing a batch and waiting 3s'
batch = Sidekiq::Batch.new
batch.jobs { SleepyWorker.perform_async(sleep: JOB_SLEEP) }
bid = batch.bid
sleep 3

log "Jobs in the default queue: #{Sidekiq::Queue.new.size}"
log "Job in progress: #{Sidekiq::Workers.new.size}"
log "Jobs pending in batch: #{Sidekiq::Batch::Status.new(bid).pending}"

log '3. Sending SIGINT to Sidekiq and waiting 1s'
Process.kill('INT', sidekiq_pid)
sleep 1

log '4. Sending SIGKILL to Sidekiq before jobs ended and waiting 3s'
Process.kill('KILL', sidekiq_pid)
sleep 3

log "Jobs in the default queue: #{Sidekiq::Queue.new.size}"
log "Job in progress: #{Sidekiq::Workers.new.size}"
log "Jobs pending in batch: #{Sidekiq::Batch::Status.new(bid).pending}"

log '5. Starting Sidekiq again and waiting 3s'
sidekiq_pid = spawn('sidekiq -c1 -r ./sidekiq.rb')
sleep 3

log "Waiting for the job to finish."
sleep JOB_SLEEP

pending_size = Sidekiq::Batch::Status.new(bid).pending

if pending_size > 0
  log "Expected batch to complete, but still pending with #{pending_size} jobs"
else
  log "Reproduce didn't work. Run the script again."
end
